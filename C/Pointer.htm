<!DOCTYPE html>
<html>
	<head>
		<title>C</title>
		<link rel="stylesheet" href="../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Pointer
		</div>

		<div class = "subtitle">Define an Array</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;

int main()
{
	int a = 10;
	int *ptr = NULL; // NULL is constant zero

	ptr = &a;

	printf("a: %d\n", *ptr);

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Pointer Arithmetic</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;

int main()
{
	int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
	int *ptr;

	ptr = a;

	int i;
	for(i = 0; i &lt; 10; i++)
		printf("%d, %d\n", i, *(ptr+i));

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Pass Pointer to Function and Return Pointer from Function</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int * getArray(int size)
{
	int *array;
	array = (int*) malloc(size*sizeof(int)); // allocate memory

	int i;
	for(i = 0; i &lt; size; i++)
		array[i] = i;

	return array;
}

void disp(int *array, int size)
{
	int i;
	for(i = 0; i &lt; size; i++)
		printf("%d, %d\n", i, array[i]);
}

int main()
{
	int *array;

	array = getArray(10); // get array

	disp(array, 10);

	free(array); // release memory

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Pointers to Constants</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;

void disp(const int *array, int size)
{
	int i;

	for(i = 0; i &lt; size; i++)
		printf("%d\n", array[i]);

	//array[0] = 10; // error
}

int main()
{
	const int array[] = {0, 1, 2, 3};

	disp(array, 4);

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Two-Dimensional Array</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// single pointer
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void setArray(int *array, int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
		for(j = 0; j &lt; c; j++)
			*(array+i*c+j) = i*10 + j;
}

void dispArray(int *array, int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
	{
		for(j = 0; j &lt; c; j++)
			printf("%10d", *(array+i*c+j));
		printf("\n");
	}
}

int main()
{
	int r = 3, c = 4;
	int *array;
	array = (int*)malloc(r*c*sizeof(int)); // allocate memory

	setArray(array, r, c);
	dispArray(array, r, c);

	free(array); // free memory
}
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// array of pointer
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void setArray(int *array[], int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
		for(j = 0; j &lt; c; j++)
			array[i][j] = i*10 + j;
}

void dispArray(int *array[], int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
	{
		for(j = 0; j &lt; c; j++)
			printf("%10d", *(*(array+i)+j));
		printf("\n");
	}
}

int main()
{
	int r = 3, c = 4;
	int *array[r];

	int i;
	for(i = 0; i &lt; r; i++)
		array[i] = (int*)malloc(c*sizeof(int));

	setArray(array, r, c);
	dispArray(array, r, c);

	for(i = 0; i &lt; r; i++)
		free(array[i]);
	
	return 0;
}
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// pointer to pointer
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void setArray(int **array, int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
		for(j = 0; j &lt; c; j++)
			array[i][j] = i*10 + j;
}

void dispArray(int **array, int r, int c)
{
	int i, j;
	for(i = 0; i &lt; r; i++)
	{
		for(j = 0; j &lt; c; j++)
			printf("%10d", *(*(array+i)+j));
		printf("\n");
	}
}

int main()
{
	int r = 3, c = 4;
	int **array;

	// allocate two-dimensional array with a double pointer
	array = (int **)malloc(r*sizeof(int *));

	int i;
	for(i = 0; i &lt; r; i++)
		array[i] = (int*)malloc(c*sizeof(int));

	setArray(array, r, c);
	dispArray(array, r, c);

	// free memory
	for(i = 0; i &lt; r; i++)
		free(array[i]);

	free(array);
	
	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">String</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main()
{
	char *array;

	size_t n = 80*sizeof(char);
	array = (char *)malloc(n);

	printf("Please enter your name:\n");
	scanf("%s", array);

	printf("%s, length is %lu\n", array, strlen(array));

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Pass Arguments to Program</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
	int i;
	for(i = 0; i &lt; argc; i++)
		printf("Argument %d: %s\n", i, argv[i]);

	return 0;
}
		</pre>
		</div>
	</body>
</html>
