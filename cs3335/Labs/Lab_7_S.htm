<!DOCTYPE html>
<html>
	<head>
		<title>C</title>
		<link rel="stylesheet" href="../../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Solution of Lab 7
		</div>

		<div class = "block">
		<pre class = "prettyprint linenums">
// main.c
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include "array.h"
#include "io.h"

int main()
{
	srand(time(NULL));

	int size = getSize(); // read array size

	int *array = getArray(size); // create a random array

	int *c = copy(array, size); // make a copy

	reverse(c, 0, size/2-1); // reverse the first half
	sort(c, size/2, size-1); // sort the second half

	display(array, 0, size-1); // display the original copy
	display(c, 0, size-1); // display the operated copy

	// free memory
	free(array);
	free(c);

	return 0;
}
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// io.h
#ifndef IO_H
#define IO_H

void display(int *ptr, int start, int end);

int getSize();

#endif
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// io.c
#include &lt;stdio.h&gt;
#include "io.h"

void display(int *ptr, int start, int end)
{
	for(int i = start; i &lt;= end; i++)
		printf("%4d", ptr[i]);
	printf("\n");
}

int getSize()
{
	int size;
	printf("Enter the size of the array: ");
	scanf("%d", &amp;size);

	return size;
}
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// array.h
#ifndef ARRAY_H
#define ARRAY_H

int *getArray(int size);

void sort(int *array, int start, int end);

int *copy(int *array, int size);

void reverse(int *array, int start, int end);

#endif
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
// array.c
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "array.h"

int *getArray(int size)
{
	int *ptr = (int *) malloc(size*sizeof(int));

	for(int i = 0; i &lt; size; i++)
		ptr[i] = rand()%10;

	return ptr;
}

void sort(int *array, int start, int end)
{
	int size = end-start+1;
	for (int i = 0; i &lt; size; i++)
       		for (int j = 0; j &lt; size-i-1; j++)
           		if (array[j+start] &gt; array[j+start+1])
	   		{
		   		int temp = array[j+start];
		   		array[j+start] = array[j+start+1];
		   		array[j+start+1] = temp;
	   		}
}

int *copy(int *array, int size)
{
	int *c = (int *) malloc(size*sizeof(int));

	for(int i = 0; i &lt; size; i++)
		c[i] = array[i];

	return c;
}

void reverse(int *array, int start, int end)
{
	int size = end - start + 1;
	int *temp = (int *) malloc(size*sizeof(int));

	for(int i = end; i &gt;= start; i--)
	{
		temp[end -i] = array[i];
	}

	for(int i = 0; i &lt; size; i++)
	{
		array[start+i] = temp[i];
	}

	free(temp);
}
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
# makefile
vpath %.h include
vpath %.c src

SRC = src
OBJECTIVES = main.o io.o array.o
CFLAGS = -I include
CC = gcc
PROG = Array
DEST = ~/.local/bin

$(PROG): $(OBJECTIVES)
	$(CC) -o $(PROG) $(OBJECTIVES)

main.o: main.c io.h array.h
	$(CC) -c $(SRC)/main.c $(CFLAGS)
io.o: io.c io.h
	$(CC) -c $(SRC)/io.c $(CFLAGS)
array.o: array.c array.h
	$(CC) -c $(SRC)/array.c $(CFLAGS)

.PHONY: clean
clean:
	-rm -f *.o $(PROG)

.PHONY: install
install: $(PROG)
	-mkdir $(DEST)
	cp $(PROG) $(DEST)

.PHONY: uninstall
uninstall:
	-rm $(DEST)/$(PROG)
		</pre>
		</div>
	</body>
</html>
