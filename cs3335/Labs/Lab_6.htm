<!DOCTYPE html>
<html>
	<head>
		<title>C</title>
		<link rel="stylesheet" href="../../css/atelier-sulphurpool-light.css" type="text/css">
		<script src="../../js/google-code-prettify/run_prettify.js?autoload=true&amp;lang=css"></script>
		<style>
			div.title {color: navy; font-weight: bold; width: 80%; font-size: 32px; text-align: center; position: relative; margin: auto;}
			div.subtitle {color: navy; font-weight: bold; width: 80%; font-size: 24px; text-align: position: relative; margin: auto;}
			div.block {color: navy; font-weight: bold; width: 80%; border-style: solid; padding: 5px; position: relative; margin: 10px auto; border-radius: 5px;}
			span {color: red; font-weight: bold;}
		</style>
	</head>
	<body>
		<div class = "title">
			Lab 6: Array Sorting
		</div>

		<div class = "subtitle">Sort One-Dimensional Array</div>
		<div class = "block">
			<p style = "text-align:center;"><img src = "../img/CS3335_21.png" width = "40%"></p>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int readNum()
{
	int num;
	scanf("%d", &num);

	return num;
}

void assign1DArray(int size, int array[])
{
	for(int i = 0; i &lt; size; i++)
		array[i] = rand()%size;
}

void display1DArray(int size, int array[])
{
	for(int i = 0; i &lt; size; i++)
		printf("%5d", array[i]);
	printf("\n");
}

void sort1DArray(int size, int array[])
{
   for (int i = 0; i &lt; size-1; i++)
       for (int j = 0; j &lt; size-i-1; j++)
           if (array[j] &gt; array[j+1])
	   {
		   int temp = array[j];
		   array[j] = array[j+1];
		   array[j+1] = temp;
	   }
}

int main()
{
	srand(time(NULL));

	printf("Read array size: ");
	int size = readNum();

	int array[size];
	assign1DArray(size, array);
	display1DArray(size, array);

	sort1DArray(size, array);
	display1DArray(size, array);

	return 0;
}
		</pre>
		</div>
		<div class = "subtitle">Sorting two-dimensional array</div>
		<div class = "block">
			<li>Write a C program, read the row number and column number from the keyboard to create a 2D array. Each element in the array is a random number between 1 to 10</li>
			<li>Print out the 2D array</li>
			<li>Sort each row of the 2D array, leave the original copy untouched</li>
			<li>Print out the original copy and the sorted copy</li>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
Read row number: 3
Read column number: 3
    7    1    7
    8    6    3
    7    8    5
--------------------
    7    1    7
    8    6    3
    7    8    5

    1    7    7
    3    6    8
    5    7    8
		</pre>
		</div>
		<div class = "block">
		<pre class = "prettyprint linenums">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include "io.h"
#include "util.h"

int main()
{
	srand(time(NULL));

	printf("Read row number: ");
	int row = readNum();
	printf("Read column number: ");
	int column = readNum();

	// create 2d array
	int array[row][column];
	assign2DArray(row, column, array);
	display2DArray(row, column, array);

	printf("--------------------\n");

	// create the sorted 2d array
	int arraySortedByRow[row][column];
	sortByRow(row, column, array, arraySortedByRow);

	// print out the original copy and the sorted copy
	display2DArray(row, column, array);
	printf("\n");
	display2DArray(row, column, arraySortedByRow);

	return 0;
}
		</pre>
		</div>
		<div class = "block">
			<p style = "text-align:center;"><img src = "../img/CS3335_15.png" width = "30%"></p>
		</div>
		<div class = "subtitle">Grading Criteria</div>
		<div class = "block">
			<li>The program that is not able to be compiled with makefile will receive a <span>zero</span></li>
			<li>Write your makefile with the style of the version 2. None-version-2 style will receive a <span>zero</span></li>
			<li><span>Do not</span> change the given code (10%)</li>
			<li>Code organization (10%)</li>
			<li>Add necessary comments for the functions defined (10%)</li>
			<li>The program can be compiled with make(10%)</li>
			<li>No warning information from compiling (10%)</li>
			<li>The program can generate the expected results (40%)</li>
			<li>The *.o and generated executable files can be removed by "make clean". The program can be installed by "make install" and uninstalled by "make uninstall" (10%)</li>
		</div>
		<div class = "subtitle">Submission</div>
		<div class = "block">
			<li>Compress the folder containing the code to "Lab_6.tar"</li>
			<li>Submit the compressed tar file to the BlazeView</li>
		</div>
	</body>
</html>
